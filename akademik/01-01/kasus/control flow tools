## if Statement
# x = int(input("Please enter an integer: "))
# # Please enter an integer: 42
# if x < 0:
#     x = 0
#     print("Negatif changed to zero")
# elif x == 0:
#     print("Zero")
# elif x == 1:
#     print("Single")
# else:
#     print("More")

## for Statement
# word = ["cat", "window", "defenestrate"]
# for w in word:
#     print(w, len(w))

# users = {"Hans": "active", "Eleonore": "inactive", "景太郎": "active"}
# for user, status in users.copy().items():
#     if status == "inactive":
#         del users[user]

# print(users)

# active_users = {}
# for user, status in users.items():
#     if status == "active":
#         active_users[user] = status

# print(active_users)


## the range() Fungtion
# for i in range(5):
#     print(i)

# for i in range(6, 0,-1 ):
#     print(i)

# for i in range(1, 6):
#     print("*"*i)

# for i in range(5, 10):
#     print (list(range(i)))

# for i in range(0, 10, 3):
#     print (list(range(i)))

# for i in range(-10, -100, -30):
#     print(list(range(i)))

# for i in range(10):
#     print(range(i))

# for i in range(4):
#     print(sum(range(4))

## break and continue Statements, and else Clauses on Loops
# for n in range(2, 10):
#     for x in range(2, n):
#         if n % x == 0:
#             print(n, "equals", x, "*", n//x)
#             break
#     else:
#         #loop fell through without finding a factor
#         print(n, "is a prime number")

# for num in range(2, 10):
#     if num % 2 == 0:
#         print("Found an even number", num)
#         continue
#     print("found an odd number", num)
# ## pass Statements
# while True:
#     pass # Busy-wait for keyboard interrupt
# class MyEmptyClass:
#     pass
# def initlog(*args):
#     pass #Remember to implement this!


# a = ["Mary", "had", "a", "littel", "lamb"]
# for i in range(len(a)):
#     print(i, a[i])


# def http_error(status):
#     match status:
#         case 400:
#             return "Bad request"
#         case 404:
#             return "Not found"
#         case 418:
#             return "I'm a teapot"
#         case _:
#             return "Something's wrong with the internet"
# print (http_error())

# class Poin:
#     x: int
#     y: int
# def where_is(point):
#     match point:
#         case Point(x=0, y=0):
#             print("Origin")
#         case Point(x=0, y=y)
#             print(f"Y={y}")
#         case Point(x=x, y=0):
#             print(f"X={x}")
#         case Point():
#             print("Somewhere else")
#         case _:
#             print("Not a point")


##Defining Functions
# def fib(n): #write Fibonacci series up to n
#     """Print a Fibonacci series up to n."""
#     a, b = 0, 1
#     while a < n:
#         print(a, end=' ')
#         a, b = b, a+b
#     print()

# fib(2000)
# fib
# f = fib
# f(100)
# fib(0)
# print(fib(0))

# def fib2(n): #return Fibonacci series up to n
#     """Return a list containing the Fibonacci series up to n."""
#     result = []
#     a, b = 0, 1
#     while a < n:
#         result.append(a)   #see below
#         a, b = b, a+b
#     return result

# f100 = fib2(100)
# f100


# def ask_ok(prompt, retris=4, reminder='Pleas try again!'):
#     while True:
#         ok = input(prompt)
#         if ok in ("y", "ye", "yes"):
#             return True
#         if ok in ("n", "no", "nop", "nope"):
#             return False
#         retries = retries - 1
#         if retries < 0:
#             raise ValueError("invalid user response")
#         print(reminder)

# i = 5
# def f(arg=i):
#     print(arg)

# i = 6
# f()


# def f(a, L=[]):
#     L.append(a)
#     return L
# print(f(1))
# print(f(2))
# print(f(3))


# def f(a, L=None):
#     if L is None:
#         L = []
#     L.append(a)
#     return L
# print(f(1))


# def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
#     print("-- This parrot wouldn't", action, end='')
#     print("if you put", voltage, "volts through it.")
#     print("-- Lovely plumage, the", type)
#     print("-- It's", state, "!")
# parrot(1000)
# parrot(voltage=1000)
# parrot(voltage=1000000, action='V00000M')
# parrot(action='V00000M', voltage=1000000)
# parrot('a million', 'bereft of life', 'jump')
# parrot('a thousand', state='pushing up the daisies')


def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    for kw in keywords:
        print(kw, ":", keywords[kw])


cheeseshop("Limburger", "It's very runny, sir.", "It's really very, VERY runny, sir.", shopkeeper="Michael Palin", client="John Cleese", sketch="Cheese Shop Sketch")