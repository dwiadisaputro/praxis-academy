{"ast":null,"code":"// import { AutoComplete, Button,Cascader, Checkbox, Col, Form, Input, InputNumber, Row, Select, Card } from 'antd';\n// import React, { useState } from 'react';\n//   const { Option } = Select;\n//   const residences = [\n//     { value: 'pati', label: 'Pati',\n//       children: [\n//         { value: 'tayu', label: 'Tayu',\n//           children: [\n//             { value: 'sambiroto', label: 'Sambiroto' },\n//             { value: 'tayu wetan', label: 'Tayu Wetan' },\n//           ],\n//         },\n//       ],\n//     },\n//   ];\n//   const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 8 }, },]\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 8 }, },};\n//   const tailFormItemLayout = {\n//     wrapperCol: {\n//       xs: {\n//         span: 24,\n//         offset: 0,\n//       },\n//       sm: {\n//         span: 16,\n//         offset: 8,\n//       },\n//     },\n//   };\n//   const Registrasion = () => {\n//     const [form] = Form.useForm();\n//     const onFinish = (values) => {\n//       console.log('Received values of form: ', values);\n//     };\n//     // const prefixSelector = (\n//     //   <Form.Item name=\"prefix\" noStyle>\n//     //     <Select\n//     //       style={{\n//     //         width: 70,\n//     //       }}\n//     //     >\n//     //       <Option value=\"86\">+86</Option>\n//     //       <Option value=\"87\">+87</Option>\n//     //     </Select>\n//     //   </Form.Item>\n//     // );\n//     // const suffixSelector = (\n//     //   <Form.Item name=\"suffix\" noStyle>\n//     //     <Select\n//     //       style={{\n//     //         width: 70,\n//     //       }}\n//     //     >\n//     //       <Option value=\"USD\">$</Option>\n//     //       <Option value=\"CNY\">Â¥</Option>\n//     //     </Select>\n//     //   </Form.Item>\n//     // );\n//     const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n//     const onWebsiteChange = (value) => {\n//       if (!value) {\n//         setAutoCompleteResult([]);\n//       } else {\n//         setAutoCompleteResult(['.com', '.org', '.net'].map((domain) => `${value}${domain}`));\n//       }\n//     };\n//     const websiteOptions = autoCompleteResult.map((website) => ({\n//       label: website,\n//       value: website,\n//     }));\n//     return (\n//       <div style={{padding: \"40px\", background: '#ececec'}}>\n//         <Card\n//         style={{width: 800,}}\n//         >\n//         <Form\n//           {...formItemLayout}\n//           form={form}\n//           name=\"register\"\n//           onFinish={onFinish}\n//           initialValues={{\n//             residence: ['zhejiang', 'hangzhou', 'xihu'],\n//             prefix: '100',\n//           }}\n//           scrollToFirstError\n//         >\n//           <h1>Configure Your Organizational Profile</h1>\n//           <Form.Item\n//             name=\"nameOrganisation\"\n//             label=\"Organisation Name\"\n//             rules={[\n//               {\n//                 type: 'text',\n//                 message: 'The input is not valid nameOrganisation',\n//               },\n//               {\n//                 required: true,\n//                 message: 'Please input your nameOrganisation',\n//               },\n//             ]}\n//           >\n//             <Input placeholder='Organisation Name'/>\n//           </Form.Item>\n//           <Form.Item>\n//             <Row gutter={8}>\n//               <Col span={20}>\n//               <Form.Item>\n//                 <label>Business Location :</label>\n//                 <Input placeholder='Business Location'/>\n//               </Form.Item>\n//               </Col>\n//               <Col span={20}>\n//               <Form.Item>\n//                 <label>State/Province :</label>\n//                 <Input placeholder='State/Province'/>\n//               </Form.Item>\n//               </Col>\n//             </Row>\n//           </Form.Item>\n//           <h1>Regional Settings</h1>\n//           <Form.Item>\n//             <Row gutter={50}>\n//               <Col span={100}>\n//                 <Form.Item>\n//                   <label>Currency</label>\n//                   <Input placeholder='Currency' />\n//                 </Form.Item>\n//               </Col>\n//               <Col span={100}>\n//                 <Form.Item>\n//                   <label>Language</label>\n//                   <Input placeholder='Language' />\n//                 </Form.Item>\n//               </Col>\n//             </Row>\n//           </Form.Item>\n//           <Form.Item>\n//             <label>Time Zone</label>\n//             <Input type='text' placeholder='Time Zone' />\n//           </Form.Item>\n//           {/* <Form.Item\n//             name=\"confirm\"\n//             label=\"Confirm Password\"\n//             dependencies={['password']}\n//             hasFeedback\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please confirm your password!',\n//               },\n//               ({ getFieldValue }) => ({\n//                 validator(_, value) {\n//                   if (!value || getFieldValue('password') === value) {\n//                     return Promise.resolve();\n//                   }\n//                   return Promise.reject(new Error('The two passwords that you entered do not match!'));\n//                 },\n//               }),\n//             ]}\n//           >\n//             <Input.Password />\n//           </Form.Item>\n//           <Form.Item\n//             name=\"nickname\"\n//             label=\"Nickname\"\n//             tooltip=\"What do you want others to call you?\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input your nickname!',\n//                 whitespace: true,\n//               },\n//             ]}\n//           >\n//             <Input />\n//           </Form.Item>\n//           <Form.Item\n//             name=\"residence\"\n//             label=\"Habitual Residence\"\n//             rules={[\n//               {\n//                 type: 'array',\n//                 required: true,\n//                 message: 'Please select your habitual residence!',\n//               },\n//             ]}\n//           >\n//             <Cascader options={residences} />\n//           </Form.Item>\n//           <Form.Item\n//             name=\"phone\"\n//             label=\"Phone Number\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input your phone number!',\n//               },\n//             ]}\n//           >\n//             <Input\n//               addonBefore={prefixSelector}\n//               style={{\n//                 width: '100%',\n//               }}\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             name=\"donation\"\n//             label=\"Donation\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input donation amount!',\n//               },\n//             ]}\n//           >\n//             <InputNumber\n//               addonAfter={suffixSelector}\n//               style={{\n//                 width: '100%',\n//               }}\n//             />\n//           </Form.Item>\n//           <Form.Item\n//             name=\"website\"\n//             label=\"Website\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input website!',\n//               },\n//             ]}\n//           >\n//             <AutoComplete options={websiteOptions} onChange={onWebsiteChange} placeholder=\"website\">\n//               <Input />\n//             </AutoComplete>\n//           </Form.Item>\n//           <Form.Item\n//             name=\"intro\"\n//             label=\"Intro\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input Intro',\n//               },\n//             ]}\n//           >\n//             <Input.TextArea showCount maxLength={100} />\n//           </Form.Item>\n//           <Form.Item\n//             name=\"gender\"\n//             label=\"Gender\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please select gender!',\n//               },\n//             ]}\n//           >\n//             <Select placeholder=\"select your gender\">\n//               <Option value=\"male\">Male</Option>\n//               <Option value=\"female\">Female</Option>\n//               <Option value=\"other\">Other</Option>\n//             </Select>\n//           </Form.Item>\n//           <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n//             <Row gutter={8}>\n//               <Col span={12}>\n//                 <Form.Item\n//                   name=\"captcha\"\n//                   noStyle\n//                   rules={[\n//                     {\n//                       required: true,\n//                       message: 'Please input the captcha you got!',\n//                     },\n//                   ]}\n//                 >\n//                   <Input />\n//                 </Form.Item>\n//               </Col>\n//               <Col span={12}>\n//                 <Button>Get captcha</Button>\n//               </Col>\n//             </Row>\n//           </Form.Item>\n//           <Form.Item\n//             name=\"agreement\"\n//             valuePropName=\"checked\"\n//             rules={[\n//               {\n//                 validator: (_, value) =>\n//                   value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\n//               },\n//             ]}\n//             {...tailFormItemLayout}\n//           >\n//             <Checkbox>\n//               I have read the <a href=\"\">agreement</a>\n//             </Checkbox>\n//           </Form.Item>\n//           <Form.Item {...tailFormItemLayout}>\n//             <Button type=\"primary\" htmlType=\"submit\">\n//               Register\n//             </Button>\n//           </Form.Item> */}\n//         <Form.Item>\n//           <Button type='primary'>Register</Button>\n//         </Form.Item>\n//         </Form>\n//         </Card>\n//       </div> \n//     );\n//   };\n//   export default Registrasion;","map":{"version":3,"names":[],"sources":["/home/blk/Adi/react.coba/src/Component/Registrasion.js"],"sourcesContent":["// import { AutoComplete, Button,Cascader, Checkbox, Col, Form, Input, InputNumber, Row, Select, Card } from 'antd';\n// import React, { useState } from 'react';\n\n  \n//   const { Option } = Select;\n//   const residences = [\n//     { value: 'pati', label: 'Pati',\n//       children: [\n//         { value: 'tayu', label: 'Tayu',\n//           children: [\n//             { value: 'sambiroto', label: 'Sambiroto' },\n//             { value: 'tayu wetan', label: 'Tayu Wetan' },\n//           ],\n//         },\n//       ],\n//     },\n//   ];\n//   const formItemLayout = {\n//     labelCol: {\n//       xs: { span: 24 },\n//       sm: { span: 8 }, },]\n//     wrapperCol: {\n//       xs: { span: 24 },\n//       sm: { span: 8 }, },};\n//   const tailFormItemLayout = {\n//     wrapperCol: {\n//       xs: {\n//         span: 24,\n//         offset: 0,\n//       },\n//       sm: {\n//         span: 16,\n//         offset: 8,\n//       },\n//     },\n//   };\n  \n//   const Registrasion = () => {\n//     const [form] = Form.useForm();\n  \n//     const onFinish = (values) => {\n//       console.log('Received values of form: ', values);\n//     };\n  \n//     // const prefixSelector = (\n//     //   <Form.Item name=\"prefix\" noStyle>\n//     //     <Select\n//     //       style={{\n//     //         width: 70,\n//     //       }}\n//     //     >\n//     //       <Option value=\"86\">+86</Option>\n//     //       <Option value=\"87\">+87</Option>\n//     //     </Select>\n//     //   </Form.Item>\n//     // );\n//     // const suffixSelector = (\n//     //   <Form.Item name=\"suffix\" noStyle>\n//     //     <Select\n//     //       style={{\n//     //         width: 70,\n//     //       }}\n//     //     >\n//     //       <Option value=\"USD\">$</Option>\n//     //       <Option value=\"CNY\">Â¥</Option>\n//     //     </Select>\n//     //   </Form.Item>\n//     // );\n//     const [autoCompleteResult, setAutoCompleteResult] = useState([]);\n  \n//     const onWebsiteChange = (value) => {\n//       if (!value) {\n//         setAutoCompleteResult([]);\n//       } else {\n//         setAutoCompleteResult(['.com', '.org', '.net'].map((domain) => `${value}${domain}`));\n//       }\n//     };\n  \n//     const websiteOptions = autoCompleteResult.map((website) => ({\n//       label: website,\n//       value: website,\n//     }));\n    \n    \n//     return (\n//       <div style={{padding: \"40px\", background: '#ececec'}}>\n//         <Card\n//         style={{width: 800,}}\n//         >\n//         <Form\n//           {...formItemLayout}\n//           form={form}\n//           name=\"register\"\n//           onFinish={onFinish}\n//           initialValues={{\n//             residence: ['zhejiang', 'hangzhou', 'xihu'],\n//             prefix: '100',\n//           }}\n//           scrollToFirstError\n//         >\n//           <h1>Configure Your Organizational Profile</h1>\n//           <Form.Item\n//             name=\"nameOrganisation\"\n//             label=\"Organisation Name\"\n//             rules={[\n//               {\n//                 type: 'text',\n//                 message: 'The input is not valid nameOrganisation',\n//               },\n//               {\n//                 required: true,\n//                 message: 'Please input your nameOrganisation',\n//               },\n//             ]}\n//           >\n//             <Input placeholder='Organisation Name'/>\n//           </Form.Item>\n    \n//           <Form.Item>\n//             <Row gutter={8}>\n//               <Col span={20}>\n//               <Form.Item>\n//                 <label>Business Location :</label>\n//                 <Input placeholder='Business Location'/>\n//               </Form.Item>\n//               </Col>\n\n//               <Col span={20}>\n//               <Form.Item>\n//                 <label>State/Province :</label>\n//                 <Input placeholder='State/Province'/>\n//               </Form.Item>\n//               </Col>\n//             </Row>\n//           </Form.Item>\n\n//           <h1>Regional Settings</h1>\n          \n//           <Form.Item>\n//             <Row gutter={50}>\n//               <Col span={100}>\n//                 <Form.Item>\n//                   <label>Currency</label>\n//                   <Input placeholder='Currency' />\n//                 </Form.Item>\n//               </Col>\n\n//               <Col span={100}>\n//                 <Form.Item>\n//                   <label>Language</label>\n//                   <Input placeholder='Language' />\n//                 </Form.Item>\n//               </Col>\n//             </Row>\n//           </Form.Item>\n\n//           <Form.Item>\n//             <label>Time Zone</label>\n//             <Input type='text' placeholder='Time Zone' />\n//           </Form.Item>\n          \n//           {/* <Form.Item\n//             name=\"confirm\"\n//             label=\"Confirm Password\"\n//             dependencies={['password']}\n//             hasFeedback\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please confirm your password!',\n//               },\n//               ({ getFieldValue }) => ({\n//                 validator(_, value) {\n//                   if (!value || getFieldValue('password') === value) {\n//                     return Promise.resolve();\n//                   }\n    \n//                   return Promise.reject(new Error('The two passwords that you entered do not match!'));\n//                 },\n//               }),\n//             ]}\n//           >\n//             <Input.Password />\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"nickname\"\n//             label=\"Nickname\"\n//             tooltip=\"What do you want others to call you?\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input your nickname!',\n//                 whitespace: true,\n//               },\n//             ]}\n//           >\n//             <Input />\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"residence\"\n//             label=\"Habitual Residence\"\n//             rules={[\n//               {\n//                 type: 'array',\n//                 required: true,\n//                 message: 'Please select your habitual residence!',\n//               },\n//             ]}\n//           >\n//             <Cascader options={residences} />\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"phone\"\n//             label=\"Phone Number\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input your phone number!',\n//               },\n//             ]}\n//           >\n//             <Input\n//               addonBefore={prefixSelector}\n//               style={{\n//                 width: '100%',\n//               }}\n//             />\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"donation\"\n//             label=\"Donation\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input donation amount!',\n//               },\n//             ]}\n//           >\n//             <InputNumber\n//               addonAfter={suffixSelector}\n//               style={{\n//                 width: '100%',\n//               }}\n//             />\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"website\"\n//             label=\"Website\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input website!',\n//               },\n//             ]}\n//           >\n//             <AutoComplete options={websiteOptions} onChange={onWebsiteChange} placeholder=\"website\">\n//               <Input />\n//             </AutoComplete>\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"intro\"\n//             label=\"Intro\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please input Intro',\n//               },\n//             ]}\n//           >\n//             <Input.TextArea showCount maxLength={100} />\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"gender\"\n//             label=\"Gender\"\n//             rules={[\n//               {\n//                 required: true,\n//                 message: 'Please select gender!',\n//               },\n//             ]}\n//           >\n//             <Select placeholder=\"select your gender\">\n//               <Option value=\"male\">Male</Option>\n//               <Option value=\"female\">Female</Option>\n//               <Option value=\"other\">Other</Option>\n//             </Select>\n//           </Form.Item>\n    \n//           <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n//             <Row gutter={8}>\n//               <Col span={12}>\n//                 <Form.Item\n//                   name=\"captcha\"\n//                   noStyle\n//                   rules={[\n//                     {\n//                       required: true,\n//                       message: 'Please input the captcha you got!',\n//                     },\n//                   ]}\n//                 >\n//                   <Input />\n//                 </Form.Item>\n//               </Col>\n//               <Col span={12}>\n//                 <Button>Get captcha</Button>\n//               </Col>\n//             </Row>\n//           </Form.Item>\n    \n//           <Form.Item\n//             name=\"agreement\"\n//             valuePropName=\"checked\"\n//             rules={[\n//               {\n//                 validator: (_, value) =>\n//                   value ? Promise.resolve() : Promise.reject(new Error('Should accept agreement')),\n//               },\n//             ]}\n//             {...tailFormItemLayout}\n//           >\n//             <Checkbox>\n//               I have read the <a href=\"\">agreement</a>\n//             </Checkbox>\n//           </Form.Item>\n//           <Form.Item {...tailFormItemLayout}>\n//             <Button type=\"primary\" htmlType=\"submit\">\n//               Register\n//             </Button>\n//           </Form.Item> */}\n//         <Form.Item>\n//           <Button type='primary'>Register</Button>\n//         </Form.Item>\n//         </Form>\n//         </Card>\n//       </div> \n//     );\n//   };\n  \n//   export default Registrasion;"],"mappings},"metadata":{},"sourceType":"module"}